<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>逃逸分析 on 编程日记</title>
    <link>/tags/%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</link>
    <description>Recent content in 逃逸分析 on 编程日记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright © 2019-{year} jimyag. All Rights Reserved. </copyright>
    <lastBuildDate>Tue, 18 Jan 2022 14:34:24 +0000</lastBuildDate><atom:link href="/tags/%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang逃逸现象</title>
      <link>/posts/427ffcfc/</link>
      <pubDate>Tue, 18 Jan 2022 14:34:24 +0000</pubDate>
      
      <guid>/posts/427ffcfc/</guid>
      <description>&lt;p&gt;go语言编译器会自动决定把一个变量放在栈还是放在堆，编译器会做&lt;strong&gt;逃逸分析(escape analysis)&lt;/strong&gt;，&lt;strong&gt;当发现变量的作用域没有跑出函数范围，就可以在栈上，反之则必须分配在堆&lt;/strong&gt;。
go语言声称这样可以释放程序员关于内存的使用限制，更多的让程序员关注于程序功能逻辑本身。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
