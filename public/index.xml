<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程日记</title>
    <link>/</link>
    <description>Recent content on 编程日记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright © 2019-{year} jimyag. All Rights Reserved. </copyright>
    <lastBuildDate>Mon, 05 Sep 2022 23:20:59 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Google MapReduce翻译</title>
      <link>/posts/6db6b747/</link>
      <pubDate>Mon, 05 Sep 2022 23:20:59 +0800</pubDate>
      
      <guid>/posts/6db6b747/</guid>
      <description>&lt;p&gt;MapReduce 中文&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>6.824 Spring 2020 Lab1 MapReduce文档翻译</title>
      <link>/posts/f6adfb46/</link>
      <pubDate>Mon, 05 Sep 2022 22:27:51 +0800</pubDate>
      
      <guid>/posts/f6adfb46/</guid>
      <description>&lt;p&gt;本文对 MIT 6.824 Lab 1:MapReduce 的说明文档进行了全文翻译。需要注意的是文中的 job 和 task，其中，job 是指整个 MapReduce 计算，表示的是任务整体，而 task 则是指一次 Map/Reduce 调用，表示的是任务局部，一个完整的 MapReduce job 由一些 Map task 和 Reduce task 组成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我的notion规划</title>
      <link>/posts/14976c16/</link>
      <pubDate>Sun, 07 Aug 2022 23:58:11 +0800</pubDate>
      
      <guid>/posts/14976c16/</guid>
      <description>&lt;p&gt;本篇文章主要会介绍我为什么会选择使用 notion，以及我在 notion 中的规划。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git开发分支落后远程主分支</title>
      <link>/posts/9c78a390/</link>
      <pubDate>Tue, 02 Aug 2022 11:36:30 +0800</pubDate>
      
      <guid>/posts/9c78a390/</guid>
      <description>&lt;p&gt;我们平时开发的时候都是从主仓库 fork 到自己仓库，然后将 fork 的仓库 clone 到本地进行开发，本地创建对应的开发分支A，开发完成以后再将A分支提交到 fork 的仓库，之后提交 pr 到主仓库。 但是一般而言，我们都是整个团队在开发，等开发完了，需要合并到远程分支的时候，远程分支已经有很多次提交（commit)了，自己的分支已经落后主分支很多版本，切换回主分支的时候就不在最新commit上了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Oh My Zsh进入git目录卡顿</title>
      <link>/posts/0f0b28a1/</link>
      <pubDate>Tue, 26 Jul 2022 23:26:27 +0800</pubDate>
      
      <guid>/posts/0f0b28a1/</guid>
      <description>&lt;p&gt;描述&lt;/p&gt;
&lt;p&gt;在 clone 下的 git 仓库中查看文件，发现很卡顿。一条&lt;code&gt;ls&lt;/code&gt;的命令都需要 7,8 秒。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vimtutor翻译</title>
      <link>/posts/e84c3531/</link>
      <pubDate>Sat, 09 Jul 2022 23:22:17 +0800</pubDate>
      
      <guid>/posts/e84c3531/</guid>
      <description>&lt;p&gt;Vimtutor 的中文翻译&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>将博客迁移到七牛云</title>
      <link>/posts/3aafaaaf/</link>
      <pubDate>Tue, 28 Jun 2022 21:16:21 +0800</pubDate>
      
      <guid>/posts/3aafaaaf/</guid>
      <description>&lt;p&gt;七牛云对注册的用户提供永久免费存储和CDN额度&lt;a href=&#34;https://marketing.qiniu.com/activity/2021618-act-cdn&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;CDN 优惠专场 (qiniu.com)&lt;/a&gt;，所以打算将自己博客迁移过来。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LRU缓存实现</title>
      <link>/posts/7a57e53d/</link>
      <pubDate>Mon, 30 May 2022 23:18:19 +0800</pubDate>
      
      <guid>/posts/7a57e53d/</guid>
      <description>&lt;p&gt;使用C++和Go实现LRU缓存&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>软件测试技术</title>
      <link>/posts/a0aa4897/</link>
      <pubDate>Tue, 17 May 2022 23:28:16 +0800</pubDate>
      
      <guid>/posts/a0aa4897/</guid>
      <description>&lt;p&gt;软件测试技术的复习资料&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go如何优雅进行错误处理</title>
      <link>/posts/608465d8/</link>
      <pubDate>Sun, 08 May 2022 10:15:35 +0800</pubDate>
      
      <guid>/posts/608465d8/</guid>
      <description>&lt;p&gt;介绍Go语言如何优雅的处理错误。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Newcoder Top 101 二叉树</title>
      <link>/posts/e62967f0/</link>
      <pubDate>Tue, 03 May 2022 20:16:44 +0800</pubDate>
      
      <guid>/posts/e62967f0/</guid>
      <description>&lt;p&gt;牛客算法必刷TOP101，包含：链表、二分查找/排序、二叉树、堆/栈/队列、哈希、递归/回溯、动态规划、字符串、双指针、贪心算法、模拟总共101道题。&lt;/p&gt;
&lt;p&gt;此部分是&lt;strong&gt;二叉树专题&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nowcoder.com/exam/oj?page=1&amp;amp;tab=%e7%ae%97%e6%b3%95%e7%af%87&amp;amp;topicId=295&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;牛客网 (nowcoder.com)&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SSL TLS的完整概述及其加密方式</title>
      <link>/posts/7955ce21/</link>
      <pubDate>Mon, 02 May 2022 11:17:09 +0800</pubDate>
      
      <guid>/posts/7955ce21/</guid>
      <description>&lt;p&gt;介绍SSL/TLS的原理及其加密方式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Newcoder Top 101 二分查找排序</title>
      <link>/posts/85d3feae/</link>
      <pubDate>Sat, 30 Apr 2022 16:36:19 +0800</pubDate>
      
      <guid>/posts/85d3feae/</guid>
      <description>&lt;p&gt;牛客算法必刷TOP101，包含：链表、二分查找/排序、二叉树、堆/栈/队列、哈希、递归/回溯、动态规划、字符串、双指针、贪心算法、模拟总共101道题。&lt;/p&gt;
&lt;p&gt;此部分是&lt;strong&gt;二分查找/排序专题&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nowcoder.com/exam/oj?page=1&amp;amp;tab=%e7%ae%97%e6%b3%95%e7%af%87&amp;amp;topicId=295&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;牛客网 (nowcoder.com)&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>减少下层服务的压力 SingleFlight</title>
      <link>/posts/34618820/</link>
      <pubDate>Wed, 27 Apr 2022 13:17:31 +0800</pubDate>
      
      <guid>/posts/34618820/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/jimyag/singleflight&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;jimyag/singleflight&lt;/a&gt; 包主要是用来做并发控制，常见的比如&lt;code&gt;防止缓存击穿&lt;/code&gt; &lt;code&gt;合并查询请求&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go泛型的限制和对中间件的影响</title>
      <link>/posts/33cd41f9/</link>
      <pubDate>Tue, 26 Apr 2022 23:52:28 +0800</pubDate>
      
      <guid>/posts/33cd41f9/</guid>
      <description>&lt;p&gt;本文是基于GoCN 2022年第八期泛型的讲座的笔记。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git删除不小心上传的大文件</title>
      <link>/posts/b983a6c5/</link>
      <pubDate>Mon, 25 Apr 2022 15:07:07 +0800</pubDate>
      
      <guid>/posts/b983a6c5/</guid>
      <description>&lt;p&gt;在git中不小心上传了大文件，推送到GitHub时被拒绝。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>大数据技术及应用-复习资料</title>
      <link>/posts/77d147b1/</link>
      <pubDate>Sun, 24 Apr 2022 22:50:12 +0800</pubDate>
      
      <guid>/posts/77d147b1/</guid>
      <description>&lt;p&gt;大数据技术及应用的复习资料。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Newcoder Top 101 链表专题</title>
      <link>/posts/70f03d51/</link>
      <pubDate>Fri, 22 Apr 2022 22:48:43 +0800</pubDate>
      
      <guid>/posts/70f03d51/</guid>
      <description>&lt;p&gt;牛客算法必刷TOP101，包含：链表、二分查找/排序、二叉树、堆/栈/队列、哈希、递归/回溯、动态规划、字符串、双指针、贪心算法、模拟总共101道题。&lt;/p&gt;
&lt;p&gt;此部分是&lt;strong&gt;链表专题&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nowcoder.com/exam/oj?page=1&amp;amp;tab=%e7%ae%97%e6%b3%95%e7%af%87&amp;amp;topicId=295&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;牛客网 (nowcoder.com)&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【第三届字节跳动青训营｜刷题打卡】</title>
      <link>/posts/537fd5d3/</link>
      <pubDate>Tue, 19 Apr 2022 19:18:38 +0800</pubDate>
      
      <guid>/posts/537fd5d3/</guid>
      <description>&lt;p&gt;【第三届字节跳动青训营｜刷题打卡】记录&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从0到1实现完整的微服务框架 总结</title>
      <link>/posts/038c7636/</link>
      <pubDate>Mon, 18 Apr 2022 09:20:02 +0800</pubDate>
      
      <guid>/posts/038c7636/</guid>
      <description>&lt;p&gt;这一段时间又重构了之前的代码，这时候代码和项目的结构发生了很大的变化。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解决win端口没被占用提示access Permissions</title>
      <link>/posts/bf108eb3/</link>
      <pubDate>Tue, 12 Apr 2022 22:32:00 +0800</pubDate>
      
      <guid>/posts/bf108eb3/</guid>
      <description>&lt;p&gt;Win10端口没被却占用提示&lt;code&gt;An attempt was made to access a socket in a way forbidden by its access permissions&lt;/code&gt;,我不理解&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>服务器环境的配置</title>
      <link>/posts/173a3c06/</link>
      <pubDate>Mon, 11 Apr 2022 17:06:27 +0800</pubDate>
      
      <guid>/posts/173a3c06/</guid>
      <description>&lt;p&gt;新购买的服务器的环境配置&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从hexo迁移到Hugo</title>
      <link>/posts/642ecc47/</link>
      <pubDate>Mon, 11 Apr 2022 11:47:04 +0800</pubDate>
      
      <guid>/posts/642ecc47/</guid>
      <description>&lt;p&gt;由于之前Hexo的NexT主题加载实在太慢，关闭加载动画之后还是很慢。索性换一个新的博客框架。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从0到1实现完整的微服务框架-新建订单接口的实现</title>
      <link>/posts/6f5f2fac/</link>
      <pubDate>Tue, 05 Apr 2022 09:21:06 +0000</pubDate>
      
      <guid>/posts/6f5f2fac/</guid>
      <description>&lt;p&gt;新建订单的接口对数据的一致性要求很高，尤其是涉及到支付、金钱相关的事情。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从0到1实现完整的微服务框架-RocketMQ</title>
      <link>/posts/897c83b3/</link>
      <pubDate>Mon, 04 Apr 2022 14:47:32 +0000</pubDate>
      
      <guid>/posts/897c83b3/</guid>
      <description>&lt;p&gt;在介绍分布式事务的时候我们介绍过MQ(消息队列),只是简单的提了一下，这篇文章会从mQ的基本概念、RocketMQ的概念，使用RocketMQ等几个方面介绍RocketMQ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从0到1实现完整的微服务框架-分布式理论基础、分布式事务</title>
      <link>/posts/252f6a9e/</link>
      <pubDate>Sun, 03 Apr 2022 09:49:00 +0000</pubDate>
      
      <guid>/posts/252f6a9e/</guid>
      <description>&lt;p&gt;在微服务的开发中，新建订单的接口是需要跨微服务调用，在此过程中由于是处于不同的系统之间，想要保证出错之后全部回滚，这在本地事务中是无法做到的，下面介绍数据不一致产生的原因和分布式事务的相关理论。这个好枯燥。。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从0到1实现完整的微服务框架-库存服务</title>
      <link>/posts/c501f7ad/</link>
      <pubDate>Thu, 31 Mar 2022 16:21:29 +0000</pubDate>
      
      <guid>/posts/c501f7ad/</guid>
      <description>&lt;p&gt;在分布式系统中，数据一致性是非常重要。在此项目中库存的增减也有同样的问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从0到1实现完整的微服务框架-熔断限流和降级</title>
      <link>/posts/71ef7b9d/</link>
      <pubDate>Tue, 29 Mar 2022 13:58:43 +0000</pubDate>
      
      <guid>/posts/71ef7b9d/</guid>
      <description>&lt;p&gt;使用sentinel实现熔断限流和降级。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从0到1实现完整的微服务框架-链路追踪</title>
      <link>/posts/c8b300d9/</link>
      <pubDate>Mon, 28 Mar 2022 22:13:56 +0000</pubDate>
      
      <guid>/posts/c8b300d9/</guid>
      <description>&lt;p&gt;在分布式系统，尤其是微服务系统中，一次外部请求往往需要内部多个模块，多个中间件，多台机器的相互调用才能完成。在这一系列的调用中，可能有些是串行的，而有些是并行的。在这种情况下，我们如何才能确定这整个请求调用了哪些应用？哪些模块？哪些节点？以及它们的先后顺序和各部分的性能如何呢？&lt;/p&gt;
&lt;p&gt;这就是涉及到链路追踪。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从0到1实现完整的微服务框架-负载均衡</title>
      <link>/posts/a97428cc/</link>
      <pubDate>Mon, 28 Mar 2022 20:56:26 +0000</pubDate>
      
      <guid>/posts/a97428cc/</guid>
      <description>&lt;p&gt;本文主要介绍如何在grpc中使用负载均衡。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从0到1实现完整的微服务框架-服务注册、发现、配置中心</title>
      <link>/posts/5763d21a/</link>
      <pubDate>Mon, 28 Mar 2022 13:08:53 +0000</pubDate>
      
      <guid>/posts/5763d21a/</guid>
      <description>&lt;p&gt;当某一个服务要以集群的形式进行部署，这时候就要用到服务注册和服务发现。主要介绍使用consul进行服务发现、服务注册以及配置中心。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从0到1实现完整的微服务框架-用户服务</title>
      <link>/posts/dc2dadae/</link>
      <pubDate>Fri, 25 Mar 2022 20:42:57 +0000</pubDate>
      
      <guid>/posts/dc2dadae/</guid>
      <description>&lt;p&gt;本篇主要介绍实现用户服务中的相关内容。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从0到1实现完整的微服务框架-项目介绍</title>
      <link>/posts/5f073a52/</link>
      <pubDate>Fri, 25 Mar 2022 20:26:35 +0000</pubDate>
      
      <guid>/posts/5f073a52/</guid>
      <description>&lt;p&gt;本系列使用gRPC从0到1实现一个完整的微服务的商城项目。主要用到的技术栈有：gin、postgresql、paseto、sqlc、migrate、docker、consul、jaeger、protobuf、elasticsearch。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go中rpc包的使用</title>
      <link>/posts/11a90fe7/</link>
      <pubDate>Fri, 25 Mar 2022 14:15:03 +0000</pubDate>
      
      <guid>/posts/11a90fe7/</guid>
      <description>&lt;p&gt;Go语言的RPC包的路径为&lt;code&gt;net/rpc&lt;/code&gt;，也就是放在了net包目录下面。因此我们可以猜测该RPC包是建立在net包基础之上的。我们基于http实现了一个打印例子。下面我们尝试基于rpc实现一个类似的例子。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RPC基础介绍</title>
      <link>/posts/8d24f484/</link>
      <pubDate>Fri, 25 Mar 2022 10:44:35 +0000</pubDate>
      
      <guid>/posts/8d24f484/</guid>
      <description>&lt;p&gt;RPC（Remote Procedure Call）远程过程调用协议，一种通过网络从远程计算机上请求服务，而不需要了解底层网络技术的协议。RPC它假定某些协议的存在，例如TPC/UDP等，为通信程序之间携带信息数据。在OSI网络七层模型中，RPC跨越了传输层和应用层，RPC使得开发，包括网络分布式多程序在内的应用程序更加容易。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从SQL生成可直接调用的go接口-sqlc</title>
      <link>/posts/900c3133/</link>
      <pubDate>Thu, 24 Mar 2022 21:34:45 +0000</pubDate>
      
      <guid>/posts/900c3133/</guid>
      <description>&lt;p&gt;在 Go 语言中编写数据库操作代码真的非常痛苦！&lt;code&gt;database/sql&lt;/code&gt;标准库提供的都是比较底层的接口。我们需要编写大量重复的代码。大量的模板代码不仅写起来烦，而且还容易出错。有时候字段类型修改了一下，可能就需要改动很多地方；添加了一个新字段，之前使用&lt;code&gt;select *&lt;/code&gt;查询语句的地方都要修改。如果有些地方有遗漏，可能就会造成运行时&lt;code&gt;panic&lt;/code&gt;。即使使用 ORM 库，这些问题也不能完全解决！这时候，&lt;code&gt;sqlc&lt;/code&gt;来了！&lt;code&gt;sqlc&lt;/code&gt;可以根据我们编写的 SQL 语句生成类型安全的、地道的 Go 接口代码，我们要做的只是调用这些方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数据库迁移工具-migrate</title>
      <link>/posts/e7121931/</link>
      <pubDate>Thu, 24 Mar 2022 19:44:28 +0000</pubDate>
      
      <guid>/posts/e7121931/</guid>
      <description>&lt;p&gt;在项目中，因需求的变更常常影响到数据库表结构的设计及数据的更新，导致大量的 sql 脚本难以维护。正因为如此，数据库迁移工具的设计之前，就旨在帮助开发者更合理、有效地管理数据库。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从单体应用到微服务</title>
      <link>/posts/acba46c5/</link>
      <pubDate>Thu, 24 Mar 2022 16:04:13 +0000</pubDate>
      
      <guid>/posts/acba46c5/</guid>
      <description>&lt;p&gt;从单体应用的痛点到微服务之间的过渡的说明。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>安装Go1.18环境</title>
      <link>/posts/1dc739af/</link>
      <pubDate>Wed, 16 Mar 2022 07:33:51 +0000</pubDate>
      
      <guid>/posts/1dc739af/</guid>
      <description>&lt;p&gt;Go1.18在今天（3-16）已经发布，Go 1.18 是一个包含大量新功能的版本，同时不仅改善了性能，也对语言本身做了有史以来最大的改变。毫不夸张地说，Go 1.18 的部分设计十多年前，在第一次发布 Go 时就开始了构思(例如泛型，最早的时候在2009年Russ Cox 在博客里面讨论过泛型如何设计https://research.swtch.com/generic)。&lt;/p&gt;
&lt;p&gt;如果你想探索使用泛型优化和简化代码的最佳方法。查看最新版本的发行说明(&lt;a href=&#34;https://go.dev/doc/go1.18&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://go.dev/doc/go1.18&lt;/a&gt;) 有更多关于在 Go 1.18 中使用泛型的详细信息。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为什么paseto比jwt好？</title>
      <link>/posts/d5376d72/</link>
      <pubDate>Wed, 09 Mar 2022 11:31:02 +0000</pubDate>
      
      <guid>/posts/d5376d72/</guid>
      <description>&lt;p&gt;在平常我们做权限控制或者认证的时候，大多数是基于 token 的身份验证。在众多类型中的token中，JSON Web Token（JWT）是最流行的之一。但是人们发现了JWT中一些安全问题，主要是因为它设计了不良的标准。&lt;/p&gt;
&lt;p&gt;本文主要介绍JWT的弊端，以及一种新的token验证PASETO&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gRPC-四种模式实践</title>
      <link>/posts/3259ac99/</link>
      <pubDate>Wed, 09 Mar 2022 09:41:28 +0000</pubDate>
      
      <guid>/posts/3259ac99/</guid>
      <description>&lt;p&gt;本文介绍如何使用gRPC的四种模式&lt;/p&gt;
&lt;p&gt;gRPC共有四种模式：简单模式、服务端流模式、客户端流模式、双向流模式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为什么Request.Body需要被关闭</title>
      <link>/posts/60b013aa/</link>
      <pubDate>Thu, 24 Feb 2022 15:31:16 +0000</pubDate>
      
      <guid>/posts/60b013aa/</guid>
      <description>&lt;p&gt;面试时被问到为什么request中的body被访问一次就不能再次访问了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在同一机器上安装Go的不同版本</title>
      <link>/posts/17eab2e7/</link>
      <pubDate>Thu, 17 Feb 2022 23:28:32 +0000</pubDate>
      
      <guid>/posts/17eab2e7/</guid>
      <description>&lt;p&gt;go1.18已经支持泛型，但是目前工作使用的是1.17。如何在不卸载原有版本情况下下载1.18beta版本？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang-import自己的proto文件报红</title>
      <link>/posts/155b4227/</link>
      <pubDate>Sun, 13 Feb 2022 16:03:36 +0000</pubDate>
      
      <guid>/posts/155b4227/</guid>
      <description>&lt;p&gt;写proto时，在引入其它自己的定义的proto，之后会发现goland提示import路径不存在&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pandoc exited with code null</title>
      <link>/posts/80ae3d28/</link>
      <pubDate>Sat, 12 Feb 2022 00:18:31 +0000</pubDate>
      
      <guid>/posts/80ae3d28/</guid>
      <description>&lt;p&gt;你是否也遇到了这个问题 &lt;code&gt;pandoc exited with code null.&lt;/code&gt;
昨天还可以生成，今天就完了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TCP/IP协议三次握手、四次挥手</title>
      <link>/posts/c4697fb2/</link>
      <pubDate>Thu, 10 Feb 2022 13:24:59 +0000</pubDate>
      
      <guid>/posts/c4697fb2/</guid>
      <description>&lt;p&gt;为了实现可靠传输，TCP采用了面向字节流的方式发送数据。TCP在发送数据时，是从发送缓冲区取出一部分或全部字节并给其添加一个首部使之成为TCP报文段后进行发送。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>差分学习记录</title>
      <link>/posts/7c729863/</link>
      <pubDate>Sat, 29 Jan 2022 15:38:37 +0000</pubDate>
      
      <guid>/posts/7c729863/</guid>
      <description>&lt;p&gt;差分与前缀和相对，可以视为前缀和的逆运算。差分它可以维护多次对序列的一个区间修改一个数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>前缀和学习记录</title>
      <link>/posts/b19a7723/</link>
      <pubDate>Sat, 29 Jan 2022 01:02:43 +0000</pubDate>
      
      <guid>/posts/b19a7723/</guid>
      <description>&lt;p&gt;假设我们有一个字符串ABCDE，什么是这个单词的前缀，A、AB、ABC、ABCD、ABCDE就是这个单词的前缀，就是从第一个字母开始，依次往后拼接。E、ED、EDC、EDCB、EDCBA被称为这个单词的后缀。&lt;/p&gt;
&lt;p&gt;那么对于一个数组的前缀，例如数组a = [a1,a2,a3,a4,a5]，我们维护一个由前缀的和组成的数组sum，sum[i]表示数组中前i个数的和。&lt;/p&gt;
&lt;p&gt;sum[i] = a1+a2+&amp;hellip;+ai&lt;/p&gt;
&lt;p&gt;sum数组就被称为前缀和数组。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes学习记录</title>
      <link>/posts/387f5f40/</link>
      <pubDate>Thu, 27 Jan 2022 20:46:02 +0000</pubDate>
      
      <guid>/posts/387f5f40/</guid>
      <description>&lt;p&gt;学习k8s的记录&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>channel简介与实现原理</title>
      <link>/posts/fb1f55a9/</link>
      <pubDate>Wed, 26 Jan 2022 21:49:55 +0000</pubDate>
      
      <guid>/posts/fb1f55a9/</guid>
      <description>&lt;p&gt;作为 Go 核心的数据结构和 Goroutine 之间的通信方式，Channel 是支撑 Go 语言高性能并发编程模型的重要结构本文会介绍管道 Channel 的设计原理、数据结构和常见操作，例如 Channel 的创建、发送、接收和关闭。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浏览器同源政策</title>
      <link>/posts/6658c08b/</link>
      <pubDate>Sat, 22 Jan 2022 23:23:27 +0000</pubDate>
      
      <guid>/posts/6658c08b/</guid>
      <description>&lt;p&gt;浏览器安全的基石是&amp;quot;同源政策&amp;quot;（&lt;a href=&#34;https://en.wikipedia.org/wiki/Same-origin_policy&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;same-origin policy&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;本文介绍&amp;quot;同源政策&amp;quot;的各个方面&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang中的make和new</title>
      <link>/posts/b7d0417a/</link>
      <pubDate>Tue, 18 Jan 2022 15:58:15 +0000</pubDate>
      
      <guid>/posts/b7d0417a/</guid>
      <description>&lt;p&gt;本文主要给大家介绍了Go语言中函数&lt;code&gt;new&lt;/code&gt;与&lt;code&gt;make&lt;/code&gt;的使用和区别，关于Go语言中&lt;code&gt;new&lt;/code&gt;和&lt;code&gt;make&lt;/code&gt;是内建的两个函数，主要用来创建分配类型内存。在我们定义生成变量的时候，可能会觉得有点迷惑，其实他们的规则很简单，下面我们就通过一些示例说明他们的区别和使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang逃逸现象</title>
      <link>/posts/427ffcfc/</link>
      <pubDate>Tue, 18 Jan 2022 14:34:24 +0000</pubDate>
      
      <guid>/posts/427ffcfc/</guid>
      <description>&lt;p&gt;go语言编译器会自动决定把一个变量放在栈还是放在堆，编译器会做&lt;strong&gt;逃逸分析(escape analysis)&lt;/strong&gt;，&lt;strong&gt;当发现变量的作用域没有跑出函数范围，就可以在栈上，反之则必须分配在堆&lt;/strong&gt;。
go语言声称这样可以释放程序员关于内存的使用限制，更多的让程序员关注于程序功能逻辑本身。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang中GC回收机制三色标记与混合写屏障</title>
      <link>/posts/c21b4284/</link>
      <pubDate>Mon, 17 Jan 2022 20:46:07 +0000</pubDate>
      
      <guid>/posts/c21b4284/</guid>
      <description>&lt;p&gt;垃圾回收(Garbage Collection，简称GC)是编程语言中提供的自动的内存管理机制，自动释放不需要的内存对象，让出存储器资源。GC过程中无需程序员手动执行。GC机制在现代很多编程语言都支持，GC能力的性能与优劣也是不同语言之间对比度指标之一。&lt;/p&gt;
&lt;p&gt;Golang在GC的演进过程中也经历了很多次变革，Go V1.3之前的标记-清除(mark and sweep)算法，Go V1.3之前的标记-清扫(mark and sweep)的缺点&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go调度器GMP调度场景</title>
      <link>/posts/cb818503/</link>
      <pubDate>Mon, 17 Jan 2022 16:08:16 +0000</pubDate>
      
      <guid>/posts/cb818503/</guid>
      <description>&lt;p&gt;Go调度器调度11种场景过程全解析&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Linux安装Go环境</title>
      <link>/posts/c56e43df/</link>
      <pubDate>Mon, 17 Jan 2022 15:16:35 +0000</pubDate>
      
      <guid>/posts/c56e43df/</guid>
      <description>&lt;p&gt;本文介绍如何在Linux中配置Go语言的环境&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Goroutine调度器的GMP模型的设计思想</title>
      <link>/posts/61098f97/</link>
      <pubDate>Mon, 17 Jan 2022 12:12:56 +0000</pubDate>
      
      <guid>/posts/61098f97/</guid>
      <description>&lt;p&gt;Goroutine调度器的GMP模型的设计思想&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang调度器的由来</title>
      <link>/posts/46db0928/</link>
      <pubDate>Sun, 16 Jan 2022 23:52:10 +0000</pubDate>
      
      <guid>/posts/46db0928/</guid>
      <description>&lt;p&gt;Golang调度器的由来&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker部署Go项目</title>
      <link>/posts/e6a3ea27/</link>
      <pubDate>Mon, 10 Jan 2022 23:20:18 +0000</pubDate>
      
      <guid>/posts/e6a3ea27/</guid>
      <description>&lt;p&gt;记录自己用dockers部署Go项目&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>query和params传参的区别</title>
      <link>/posts/77535737/</link>
      <pubDate>Sun, 09 Jan 2022 20:54:07 +0000</pubDate>
      
      <guid>/posts/77535737/</guid>
      <description>&lt;p&gt;query和params传参的区别&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-1629-按键持续时间最长的键</title>
      <link>/posts/81eca2cd/</link>
      <pubDate>Sun, 09 Jan 2022 00:21:39 +0000</pubDate>
      
      <guid>/posts/81eca2cd/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;LeetCode 设计了一款新式键盘，正在测试其可用性。测试人员将会点击一系列键（总计 n 个），每次一个。&lt;/p&gt;
&lt;p&gt;给你一个长度为 n 的字符串 keysPressed ，其中 keysPressed[i] 表示测试序列中第 i 个被按下的键。releaseTimes 是一个升序排列的列表，其中 releaseTimes[i] 表示松开第 i 个键的时间。字符串和数组的 下标都从 0 开始 。第 0 个键在时间为 0 时被按下，接下来每个键都 恰好 在前一个键松开时被按下。&lt;/p&gt;
&lt;p&gt;测试人员想要找出按键 持续时间最长 的键。第 i 次按键的持续时间为 releaseTimes[i] - releaseTimes[i - 1] ，第 0 次按键的持续时间为 releaseTimes[0] 。&lt;/p&gt;
&lt;p&gt;注意，测试期间，同一个键可以在不同时刻被多次按下，而每次的持续时间都可能不同。&lt;/p&gt;
&lt;p&gt;请返回按键 持续时间最长 的键，如果有多个这样的键，则返回 按字母顺序排列最大 的那个键。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-第69场双周赛</title>
      <link>/posts/3087638f/</link>
      <pubDate>Sat, 08 Jan 2022 23:52:25 +0000</pubDate>
      
      <guid>/posts/3087638f/</guid>
      <description>&lt;p&gt;双周赛太离谱了，签到完就溜。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-89-格雷编码</title>
      <link>/posts/b9635535/</link>
      <pubDate>Sat, 08 Jan 2022 17:52:15 +0000</pubDate>
      
      <guid>/posts/b9635535/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;n 位格雷码序列 是一个由 2^n 个整数组成的序列，其中：
每个整数都在范围 [0, 2^n - 1] 内（含 0 和 2^n - 1）
第一个整数是 0
一个整数在序列中出现 不超过一次
每对 相邻 整数的二进制表示 恰好一位不同 ，且第一个 和 最后一个 整数的二进制表示 恰好一位不同
给你一个整数 n ，返回任一有效的 n 位格雷码序列 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-1614-括号的最大嵌套深度</title>
      <link>/posts/965e3905/</link>
      <pubDate>Fri, 07 Jan 2022 00:11:54 +0000</pubDate>
      
      <guid>/posts/965e3905/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果字符串满足以下条件之一，则可以称之为 有效括号字符串（valid parentheses string，可以简写为 VPS）：&lt;/p&gt;
&lt;p&gt;字符串是一个空字符串 &amp;ldquo;&amp;quot;，或者是一个不为 &amp;ldquo;(&amp;rdquo; 或 &amp;ldquo;)&amp;rdquo; 的单字符。
字符串可以写为 AB（A 与 B 字符串连接），其中 A 和 B 都是 有效括号字符串 。
字符串可以写为 (A)，其中 A 是一个 有效括号字符串 。
类似地，可以定义任何有效括号字符串 S 的 嵌套深度 depth(S)：&lt;/p&gt;
&lt;p&gt;depth(&amp;rdquo;&amp;quot;) = 0
depth(C) = 0，其中 C 是单个字符的字符串，且该字符不是 &amp;ldquo;(&amp;rdquo; 或者 &amp;ldquo;)&amp;rdquo;
depth(A + B) = max(depth(A), depth(B))，其中 A 和 B 都是 有效括号字符串
depth(&amp;quot;(&amp;quot; + A + &amp;ldquo;)&amp;rdquo;) = 1 + depth(A)，其中 A 是一个 有效括号字符串
例如：&amp;quot;&amp;quot;、&amp;quot;()()&amp;quot;、&amp;quot;()(()())&amp;quot; 都是 有效括号字符串（嵌套深度分别为 0、1、2），而 &amp;ldquo;)(&amp;rdquo; 、&amp;quot;(()&amp;quot; 都不是 有效括号字符串 。&lt;/p&gt;
&lt;p&gt;给你一个 有效括号字符串 s，返回该字符串的 s 嵌套深度 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-71-简化路径</title>
      <link>/posts/30245f9e/</link>
      <pubDate>Thu, 06 Jan 2022 22:08:14 +0000</pubDate>
      
      <guid>/posts/30245f9e/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给你一个字符串 path ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以 &amp;lsquo;/&amp;rsquo; 开头），请你将其转化为更加简洁的规范路径。&lt;/p&gt;
&lt;p&gt;在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，&amp;rsquo;//&amp;rsquo;）都被视为单个斜杠 &amp;lsquo;/&amp;rsquo; 。 对于此问题，任何其他格式的点（例如，&amp;rsquo;&amp;hellip;&amp;rsquo;）均被视为文件/目录名称。&lt;/p&gt;
&lt;p&gt;请注意，返回的 规范路径 必须遵循下述格式：&lt;/p&gt;
&lt;p&gt;始终以斜杠 &amp;lsquo;/&amp;rsquo; 开头。
两个目录名之间必须只有一个斜杠 &amp;lsquo;/&amp;rsquo; 。
最后一个目录名（如果存在）不能 以 &amp;lsquo;/&amp;rsquo; 结尾。
此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 &amp;lsquo;.&amp;rsquo; 或 &amp;lsquo;..&amp;rsquo;）。
返回简化后得到的 规范路径 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker-配置文档-图片</title>
      <link>/posts/26f6376f/</link>
      <pubDate>Thu, 06 Jan 2022 21:47:56 +0000</pubDate>
      
      <guid>/posts/26f6376f/</guid>
      <description>&lt;p&gt;Docker-配置文档的图片&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker-配置文档</title>
      <link>/posts/ddeb9b11/</link>
      <pubDate>Thu, 06 Jan 2022 21:34:27 +0000</pubDate>
      
      <guid>/posts/ddeb9b11/</guid>
      <description>&lt;p&gt;哔哩哔哩&lt;a href=&#34;https://www.bilibili.com/video/BV1wQ4y1Y7SE?spm_id_from=333.999.0.0&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;【编程不良人】Docker&amp;amp;Docker-Compose 实战!_哔哩哔哩_bilibili&lt;/a&gt;的教程的文档总结&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-1576-替换所有的问号</title>
      <link>/posts/68d43a4d/</link>
      <pubDate>Wed, 05 Jan 2022 22:16:03 +0000</pubDate>
      
      <guid>/posts/68d43a4d/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给你一个仅包含小写英文字母和 &amp;lsquo;?&amp;rsquo; 字符的字符串 s，请你将所有的 &amp;lsquo;?&amp;rsquo; 转换为若干小写字母，使最终的字符串不包含任何 连续重复 的字符。&lt;/p&gt;
&lt;p&gt;注意：你 不能 修改非 &lt;code&gt;?&lt;/code&gt; 字符。&lt;/p&gt;
&lt;p&gt;题目测试用例保证 除 &lt;code&gt;?&lt;/code&gt; 字符 之外，不存在连续重复的字符。&lt;/p&gt;
&lt;p&gt;在完成所有转换（可能无需转换）后返回最终的字符串。如果有多个解决方案，请返回其中任何一个。可以证明，在给定的约束条件下，答案总是存在的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-913-猫和老鼠</title>
      <link>/posts/e1f1048f/</link>
      <pubDate>Tue, 04 Jan 2022 21:15:17 +0000</pubDate>
      
      <guid>/posts/e1f1048f/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;两位玩家分别扮演猫和老鼠，在一张 无向 图上进行游戏，两人轮流行动。&lt;/p&gt;
&lt;p&gt;图的形式是：graph[a] 是一个列表，由满足 ab 是图中的一条边的所有节点 b 组成。&lt;/p&gt;
&lt;p&gt;老鼠从节点 1 开始，第一个出发；猫从节点 2 开始，第二个出发。在节点 0 处有一个洞。&lt;/p&gt;
&lt;p&gt;在每个玩家的行动中，他们 必须 沿着图中与所在当前位置连通的一条边移动。例如，如果老鼠在节点 1 ，那么它必须移动到 graph[1] 中的任一节点。&lt;/p&gt;
&lt;p&gt;此外，猫无法移动到洞中（节点 0）。&lt;/p&gt;
&lt;p&gt;然后，游戏在出现以下三种情形之一时结束：&lt;/p&gt;
&lt;p&gt;如果猫和老鼠出现在同一个节点，猫获胜。
如果老鼠到达洞中，老鼠获胜。
如果某一位置重复出现（即，玩家的位置和移动顺序都与上一次行动相同），游戏平局。
给你一张图 graph ，并假设两位玩家都都以最佳状态参与游戏：&lt;/p&gt;
&lt;p&gt;如果老鼠获胜，则返回 1；
如果猫获胜，则返回 2；
如果平局，则返回 0 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker基础入门</title>
      <link>/posts/8b63f587/</link>
      <pubDate>Mon, 03 Jan 2022 19:10:41 +0000</pubDate>
      
      <guid>/posts/8b63f587/</guid>
      <description>&lt;p&gt;Docker 是一个应用打包、分发、部署的工具
你也可以把它理解为一个轻量的虚拟机，它只虚拟你软件需要的运行环境，多余的一点都不要，
而普通虚拟机则是一个完整而庞大的系统，包含各种不管你要不要的软件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-1185-一周中的第几天</title>
      <link>/posts/95bcecc9/</link>
      <pubDate>Mon, 03 Jan 2022 12:14:06 +0000</pubDate>
      
      <guid>/posts/95bcecc9/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给你一个日期，请你设计一个算法来判断它是对应一周中的哪一天。&lt;/p&gt;
&lt;p&gt;输入为三个整数：day、month 和 year，分别表示日、月、年。&lt;/p&gt;
&lt;p&gt;您返回的结果必须是这几个值中的一个 {&amp;ldquo;Sunday&amp;rdquo;, &amp;ldquo;Monday&amp;rdquo;, &amp;ldquo;Tuesday&amp;rdquo;, &amp;ldquo;Wednesday&amp;rdquo;, &amp;ldquo;Thursday&amp;rdquo;, &amp;ldquo;Friday&amp;rdquo;, &amp;ldquo;Saturday&amp;rdquo;}。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-第274场周赛</title>
      <link>/posts/43ef6653/</link>
      <pubDate>Sun, 02 Jan 2022 12:21:54 +0000</pubDate>
      
      <guid>/posts/43ef6653/</guid>
      <description>&lt;p&gt;第一次参加LeetCode的周赛，记录一下自己AC的三道简单题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-390-消除游戏</title>
      <link>/posts/297384ed/</link>
      <pubDate>Sun, 02 Jan 2022 01:23:36 +0000</pubDate>
      
      <guid>/posts/297384ed/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给定一个从1 到 n 排序的整数列表。
首先，从左到右，从第一个数字开始，每隔一个数字进行删除，直到列表的末尾。
第二步，在剩下的数字中，从右到左，从倒数第一个数字开始，每隔一个数字进行删除，直到列表开头。
我们不断重复这两步，从左到右和从右到左交替进行，直到只剩下一个数字。
返回长度为 n 的列表中，最后剩下的数字。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hexo配置主流搜索引擎收录</title>
      <link>/posts/e058fe03/</link>
      <pubDate>Sun, 02 Jan 2022 00:17:03 +0000</pubDate>
      
      <guid>/posts/e058fe03/</guid>
      <description>&lt;p&gt;搜索引擎能搜索到网站的前提是它抓取了网站的内容，并对其建立了索引，其实也就是爬虫爬取 + 插入数据库。虽然大部分搜索引擎都是自动抓取网络上的所有链接，并尝试爬取以及入库，但通常会比较缓慢。所以更加推荐由我们站长主动出击，直接告诉它我们的网站地址。&lt;/p&gt;
&lt;p&gt;为了让更多人能阅读到网站内容，本文介绍如何配置Hexo被Google、bing、Baidu收录。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-2022-将一维数组转变成二维数组</title>
      <link>/posts/9806fff7/</link>
      <pubDate>Sat, 01 Jan 2022 15:33:21 +0000</pubDate>
      
      <guid>/posts/9806fff7/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给你一个下标从 0 开始的一维整数数组 original 和两个整数 m 和  n 。你需要使用 original 中 所有 元素创建一个 m 行 n 列的二维数组。&lt;/p&gt;
&lt;p&gt;original 中下标从 0 到 n - 1 （都 包含 ）的元素构成二维数组的第一行，下标从 n 到 2 * n - 1 （都 包含 ）的元素构成二维数组的第二行，依此类推。&lt;/p&gt;
&lt;p&gt;请你根据上述过程返回一个 m x n 的二维数组。如果无法构成这样的二维数组，请你返回一个空的二维数组。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-507-完美数</title>
      <link>/posts/9c98d12/</link>
      <pubDate>Fri, 31 Dec 2021 08:16:09 +0000</pubDate>
      
      <guid>/posts/9c98d12/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;对于一个 正整数，如果它和除了它自身以外的所有 正因子 之和相等，我们称它为 「完美数」。&lt;/p&gt;
&lt;p&gt;给定一个 整数 n， 如果是完美数，返回 true，否则返回 false&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-846-一手顺子</title>
      <link>/posts/111b38ee/</link>
      <pubDate>Thu, 30 Dec 2021 10:06:01 +0000</pubDate>
      
      <guid>/posts/111b38ee/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Alice 手中有一把牌，她想要重新排列这些牌，分成若干组，使每一组的牌数都是 groupSize ，并且由 groupSize 张连续的牌组成。&lt;/p&gt;
&lt;p&gt;给你一个整数数组 hand 其中 hand[i] 是写在第 i 张牌，和一个整数 groupSize 。如果她可能重新排列这些牌，返回 true ；否则，返回 false 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-1995-统计特殊四元组</title>
      <link>/posts/ace15a6d/</link>
      <pubDate>Wed, 29 Dec 2021 10:51:23 +0000</pubDate>
      
      <guid>/posts/ace15a6d/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给你一个 下标从 0 开始 的整数数组 nums ，返回满足下述条件的 不同 四元组 (a, b, c, d) 的 数目 ：&lt;/p&gt;
&lt;p&gt;nums[a] + nums[b] + nums[c] == nums[d] ，且
a &amp;lt; b &amp;lt; c &amp;lt; d&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-472-连接词</title>
      <link>/posts/a9eb621/</link>
      <pubDate>Tue, 28 Dec 2021 09:29:23 +0000</pubDate>
      
      <guid>/posts/a9eb621/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给你一个 不含重复 单词的字符串数组 words ，请你找出并返回 words 中的所有 连接词 。&lt;/p&gt;
&lt;p&gt;连接词 定义为：一个完全由给定数组中的至少两个较短单词组成的字符串。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-825-适龄的朋友</title>
      <link>/posts/69e04ce/</link>
      <pubDate>Mon, 27 Dec 2021 09:42:27 +0000</pubDate>
      
      <guid>/posts/69e04ce/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在社交媒体网站上有 n 个用户。给你一个整数数组 ages ，其中 ages[i] 是第 i 个用户的年龄。&lt;/p&gt;
&lt;p&gt;如果下述任意一个条件为真，那么用户 x 将不会向用户 y&lt;code&gt;（x != y）&lt;/code&gt;发送好友请求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;age[y] &amp;lt;= 0.5 * age[x] + 7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;age[y] &amp;gt; age[x]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;age[y] &amp;gt; 100 &amp;amp;&amp;amp; age[x] &amp;lt; 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;否则，x 将会向 y 发送一条好友请求。&lt;/p&gt;
&lt;p&gt;注意，如果 x 向 y 发送一条好友请求，y 不必也向 x 发送一条好友请求。另外，用户不会向自己发送好友请求。&lt;/p&gt;
&lt;p&gt;返回在该社交媒体网站上产生的好友请求总数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-1078-Bigram-分词</title>
      <link>/posts/e0d1a0/</link>
      <pubDate>Sun, 26 Dec 2021 23:15:20 +0000</pubDate>
      
      <guid>/posts/e0d1a0/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给出第一个词 first 和第二个词 second，考虑在某些文本 text 中可能以 &amp;ldquo;first second third&amp;rdquo; 形式出现的情况，其中 second 紧随 first 出现，third 紧随 second 出现。&lt;/p&gt;
&lt;p&gt;对于每种这样的情况，将第三个词 &amp;ldquo;third&amp;rdquo; 添加到答案中，并返回答案。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-1609-奇偶树</title>
      <link>/posts/1c05b892/</link>
      <pubDate>Sat, 25 Dec 2021 19:47:39 +0000</pubDate>
      
      <guid>/posts/1c05b892/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果一棵二叉树满足下述几个条件，则可以称为 奇偶树 ：&lt;/p&gt;
&lt;p&gt;二叉树根节点所在层下标为 0 ，根的子节点所在层下标为 1 ，根的孙节点所在层下标为 2 ，依此类推。
偶数下标 层上的所有节点的值都是 奇 整数，从左到右按顺序 严格递增
奇数下标 层上的所有节点的值都是 偶 整数，从左到右按顺序 严格递减
给你二叉树的根节点，如果二叉树为 奇偶树 ，则返回 true ，否则返回 false 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-1705-吃苹果的最大数目</title>
      <link>/posts/48cf338b/</link>
      <pubDate>Fri, 24 Dec 2021 11:07:03 +0000</pubDate>
      
      <guid>/posts/48cf338b/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;有一棵特殊的苹果树，一连 n 天，每天都可以长出若干个苹果。在第 i 天，树上会长出 apples[i] 个苹果，这些苹果将会在 days[i] 天后（也就是说，第 i + days[i] 天时）腐烂，变得无法食用。也可能有那么几天，树上不会长出新的苹果，此时用 apples[i] == 0 且 days[i] == 0 表示。&lt;/p&gt;
&lt;p&gt;你打算每天 最多 吃一个苹果来保证营养均衡。注意，你可以在这 n 天之后继续吃苹果。&lt;/p&gt;
&lt;p&gt;给你两个长度为 n 的整数数组 days 和 apples ，返回你可以吃掉的苹果的最大数目。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-1044-最长重复子串</title>
      <link>/posts/8669609e/</link>
      <pubDate>Thu, 23 Dec 2021 22:47:24 +0000</pubDate>
      
      <guid>/posts/8669609e/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给你一个字符串 s ，考虑其所有 重复子串 ：即，s 的连续子串，在 s 中出现 2 次或更多次。这些出现之间可能存在重叠。&lt;/p&gt;
&lt;p&gt;返回 任意一个 可能具有最长长度的重复子串。如果 s 不含重复子串，那么答案为 &amp;quot;&amp;quot; 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在GORM中使用Postgres自定义数据类型</title>
      <link>/posts/1fb2f937/</link>
      <pubDate>Wed, 22 Dec 2021 12:32:29 +0000</pubDate>
      
      <guid>/posts/1fb2f937/</guid>
      <description>&lt;p&gt;项目中使用到了postgres的枚举类型，但是使用GORM自动迁移表的时候出现了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bigserial&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;created_at&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timestamptz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;updated_at&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timestamptz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;deleted_at&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timestamptz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;unique&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;unique&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;authority&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;two&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;three&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;four&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;错误&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;语法错误&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;在&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;或附近的&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SQLSTATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;42601&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在&lt;a href=&#34;https://github.com/go-gorm/gorm/issues/1978#issuecomment-476673540&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;gorm/issues&lt;/a&gt;中找到了解决方案&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-686-重复叠加字符串匹配</title>
      <link>/posts/cb644e85/</link>
      <pubDate>Wed, 22 Dec 2021 09:21:49 +0000</pubDate>
      
      <guid>/posts/cb644e85/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给定两个字符串 a 和 b，寻找重复叠加字符串 a 的最小次数，使得字符串 b 成为叠加后的字符串 a 的子串，如果不存在则返回 -1。&lt;/p&gt;
&lt;p&gt;注意：字符串 &amp;ldquo;abc&amp;rdquo; 重复叠加 0 次是 &amp;ldquo;&amp;quot;，重复叠加 1 次是 &amp;ldquo;abc&amp;rdquo;，重复叠加 2 次是 &amp;ldquo;abcabc&amp;rdquo;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-1154-一年中的第几天</title>
      <link>/posts/bd5751e9/</link>
      <pubDate>Tue, 21 Dec 2021 08:58:18 +0000</pubDate>
      
      <guid>/posts/bd5751e9/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给你一个字符串 date ，按 YYYY-MM-DD 格式表示一个 现行公元纪年法 日期。请你计算并返回该日期是当年的第几天。&lt;/p&gt;
&lt;p&gt;通常情况下，我们认为 1 月 1 日是每年的第 1 天，1 月 2 日是每年的第 2 天，依此类推。每个月的天数与现行公元纪年法（格里高利历）一致。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-475-供暖器</title>
      <link>/posts/e63dcfe3/</link>
      <pubDate>Mon, 20 Dec 2021 09:31:58 +0000</pubDate>
      
      <guid>/posts/e63dcfe3/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;冬季已经来临。 你的任务是设计一个有固定加热半径的供暖器向所有房屋供暖。&lt;/p&gt;
&lt;p&gt;在加热器的加热半径范围内的每个房屋都可以获得供暖。&lt;/p&gt;
&lt;p&gt;现在，给出位于一条水平线上的房屋 houses 和供暖器 heaters 的位置，请你找出并返回可以覆盖所有房屋的最小加热半径。&lt;/p&gt;
&lt;p&gt;说明：所有供暖器都遵循你的半径标准，加热的半径也一样。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-997-找到小镇的法官</title>
      <link>/posts/e18d9e0d/</link>
      <pubDate>Sun, 19 Dec 2021 22:14:28 +0000</pubDate>
      
      <guid>/posts/e18d9e0d/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在一个小镇里，按从 1 到 n 为 n 个人进行编号。传言称，这些人中有一个是小镇上的秘密法官。&lt;/p&gt;
&lt;p&gt;如果小镇的法官真的存在，那么：&lt;/p&gt;
&lt;p&gt;小镇的法官不相信任何人。
每个人（除了小镇法官外）都信任小镇的法官。
只有一个人同时满足条件 1 和条件 2 。
给定数组 trust，该数组由信任对 trust[i] = [a, b] 组成，表示编号为 a 的人信任编号为 b 的人。&lt;/p&gt;
&lt;p&gt;如果小镇存在秘密法官并且可以确定他的身份，请返回该法官的编号。否则，返回 -1。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Casbin-入门demo</title>
      <link>/posts/112bfef3/</link>
      <pubDate>Sat, 18 Dec 2021 22:00:08 +0000</pubDate>
      
      <guid>/posts/112bfef3/</guid>
      <description>&lt;p&gt;​	Casbin努力成为与编程语言无关的，解耦的权限框架！致力于多种语言一致体验，直白来说，就是一套规则框架，在各种编程语言中稍微改动就可以与业务系统结合使用，使其成为与语言、语言框架无关且通用的权限管理系统。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>centos&#43;minio&#43;nginx搭建自己的图床</title>
      <link>/posts/f0e09e13/</link>
      <pubDate>Sat, 18 Dec 2021 16:58:21 +0000</pubDate>
      
      <guid>/posts/f0e09e13/</guid>
      <description>&lt;p&gt;由于自己不会配置如何按照每一篇博客在&lt;code&gt;hexo&lt;/code&gt;中打包博客中的图片，所以想要自己搭建一个图床，总体效果很满意。&lt;/p&gt;
&lt;p&gt;将配置过程记录，方便之后重新配置。&lt;/p&gt;
&lt;p&gt;这是搭建好的效果图&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;img class=&#34;img-fluid&#34; alt=&#34;image-20211218170846640&#34; src=&#34;/posts/f0e09e13/index/image-20211218170846640.png&#34; loading=&#34;lazy&#34;
    
     /&gt;
&lt;/picture&gt;

&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-419-甲板上的战舰</title>
      <link>/posts/aa19f9bb/</link>
      <pubDate>Sat, 18 Dec 2021 15:48:25 +0000</pubDate>
      
      <guid>/posts/aa19f9bb/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给你一个大小为 m x n 的矩阵 board 表示甲板，其中，每个单元格可以是一艘战舰 &amp;lsquo;X&amp;rsquo; 或者是一个空位 &amp;lsquo;.&amp;rsquo; ，返回在甲板 board 上放置的 战舰 的数量。&lt;/p&gt;
&lt;p&gt;战舰 只能水平或者垂直放置在 board 上。换句话说，战舰只能按 1 x k（1 行，k 列）或 k x 1（k 行，1 列）的形状建造，其中 k 可以是任意大小。两艘战舰之间至少有一个水平或垂直的空位分隔 （即没有相邻的战舰）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-1518-换酒问题</title>
      <link>/posts/656c6fd2/</link>
      <pubDate>Fri, 17 Dec 2021 10:47:30 +0000</pubDate>
      
      <guid>/posts/656c6fd2/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;小区便利店正在促销，用 numExchange 个空酒瓶可以兑换一瓶新酒。你购入了 numBottles 瓶酒。&lt;/p&gt;
&lt;p&gt;如果喝掉了酒瓶中的酒，那么酒瓶就会变成空的。&lt;/p&gt;
&lt;p&gt;请你计算 最多 能喝到多少瓶酒。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-1610-可见点的最大数目</title>
      <link>/posts/5a04344/</link>
      <pubDate>Thu, 16 Dec 2021 22:01:05 +0000</pubDate>
      
      <guid>/posts/5a04344/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给你一个点数组 points 和一个表示角度的整数 angle ，你的位置是 location ，其中 location = [posx, posy] 且 points[i] = [xi, yi] 都表示 X-Y 平面上的整数坐标。&lt;/p&gt;
&lt;p&gt;最开始，你面向东方进行观测。你 不能 进行移动改变位置，但可以通过 自转 调整观测角度。换句话说，posx 和 posy 不能改变。你的视野范围的角度用 angle 表示， 这决定了你观测任意方向时可以多宽。设 d 为你逆时针自转旋转的度数，那么你的视野就是角度范围 [d - angle/2, d + angle/2] 所指示的那片区域。&lt;/p&gt;
&lt;p&gt;对于每个点，如果由该点、你的位置以及从你的位置直接向东的方向形成的角度 位于你的视野中 ，那么你就可以看到它。&lt;/p&gt;
&lt;p&gt;同一个坐标上可以有多个点。你所在的位置也可能存在一些点，但不管你的怎么旋转，总是可以看到这些点。同时，点不会阻碍你看到其他点。&lt;/p&gt;
&lt;p&gt;返回你能看到的点的最大数目。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-851-喧闹和富有</title>
      <link>/posts/3f29dc95/</link>
      <pubDate>Wed, 15 Dec 2021 20:53:25 +0000</pubDate>
      
      <guid>/posts/3f29dc95/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;有一组 n 个人作为实验对象，从 0 到 n - 1 编号，其中每个人都有不同数目的钱，以及不同程度的安静值（quietness）。为了方便起见，我们将编号为 x 的人简称为 &amp;ldquo;person x &amp;ldquo;。&lt;/p&gt;
&lt;p&gt;给你一个数组 richer ，其中 richer[i] = [ai, bi] 表示 person ai 比 person bi 更有钱。另给你一个整数数组 quiet ，其中 quiet[i] 是 person i 的安静值。richer 中所给出的数据 逻辑自洽（也就是说，在 person x 比 person y 更有钱的同时，不会出现 person y 比 person x 更有钱的情况 ）。&lt;/p&gt;
&lt;p&gt;现在，返回一个整数数组 answer 作为答案，其中 answer[x] = y 的前提是，在所有拥有的钱肯定不少于 person x 的人中，person y 是最安静的人（也就是安静值 quiet[y] 最小的人）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-630-课程表3</title>
      <link>/posts/52f591e7/</link>
      <pubDate>Tue, 14 Dec 2021 09:04:00 +0000</pubDate>
      
      <guid>/posts/52f591e7/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这里有 n 门不同的在线课程，按从 1 到 n 编号。给你一个数组 courses ，其中 courses[i] = [durationi, lastDayi] 表示第 i 门课将会 持续 上 durationi 天课，并且必须在不晚于 lastDayi 的时候完成。&lt;/p&gt;
&lt;p&gt;你的学期从第 1 天开始。且不能同时修读两门及两门以上的课程。&lt;/p&gt;
&lt;p&gt;返回你最多可以修读的课程数目。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-807-保持城市天际线</title>
      <link>/posts/9457eaea/</link>
      <pubDate>Mon, 13 Dec 2021 17:59:13 +0000</pubDate>
      
      <guid>/posts/9457eaea/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给你一座由 n x n 个街区组成的城市，每个街区都包含一座立方体建筑。给你一个下标从 0 开始的 n x n 整数矩阵 grid ，其中 grid[r][c] 表示坐落于 r 行 c 列的建筑物的 高度 。&lt;/p&gt;
&lt;p&gt;城市的 天际线 是从远处观察城市时，所有建筑物形成的外部轮廓。从东、南、西、北四个主要方向观测到的 天际线 可能不同。&lt;/p&gt;
&lt;p&gt;我们被允许为 任意数量的建筑物 的高度增加 任意增量（不同建筑物的增量可能不同） 。 高度为 0 的建筑物的高度也可以增加。然而，增加的建筑物高度 不能影响 从任何主要方向观察城市得到的 天际线 。&lt;/p&gt;
&lt;p&gt;在 不改变 从任何主要方向观测到的城市 天际线 的前提下，返回建筑物可以增加的 最大高度增量总和 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sit-计算机网络原理-复习</title>
      <link>/posts/6e1fe6f1/</link>
      <pubDate>Sun, 12 Dec 2021 19:23:01 +0000</pubDate>
      
      <guid>/posts/6e1fe6f1/</guid>
      <description>&lt;p&gt;根据老师提供的范围整理的计算机网络原理的复习资料&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-709-转换成小写字母</title>
      <link>/posts/1af266db/</link>
      <pubDate>Sun, 12 Dec 2021 07:43:09 +0000</pubDate>
      
      <guid>/posts/1af266db/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目：&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给你一个字符串 &lt;code&gt;s&lt;/code&gt; ，将该字符串中的大写字母转换成相同的小写字母，返回新的字符串。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-911-在线选举</title>
      <link>/posts/acd85fa1/</link>
      <pubDate>Sat, 11 Dec 2021 16:56:15 +0000</pubDate>
      
      <guid>/posts/acd85fa1/</guid>
      <description>&lt;h3 id=&#34;题目&#34;&gt;题目&lt;a class=&#34;anchor ms-1&#34; href=&#34;#题目&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给你两个整数数组 persons 和 times 。在选举中，第 i 张票是在时刻为 times[i] 时投给候选人 persons[i] 的。&lt;/p&gt;
&lt;p&gt;对于发生在时刻 t 的每个查询，需要找出在 t 时刻在选举中领先的候选人的编号。&lt;/p&gt;
&lt;p&gt;在 t 时刻投出的选票也将被计入我们的查询之中。在平局的情况下，最近获得投票的候选人将会获胜。&lt;/p&gt;
&lt;p&gt;实现 TopVotedCandidate 类：&lt;/p&gt;
&lt;p&gt;TopVotedCandidate(int[] persons, int[] times) 使用 persons 和 times 数组初始化对象。
int q(int t) 根据前面描述的规则，返回在时刻 t 在选举中领先的候选人的编号。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>策略模式</title>
      <link>/posts/72e3b671/</link>
      <pubDate>Sat, 11 Dec 2021 16:48:29 +0000</pubDate>
      
      <guid>/posts/72e3b671/</guid>
      <description>&lt;p&gt;在现实生活中常常遇到实现某种目标存在多种策略可供选择的情况，例如，出行旅游可以乘坐飞机、乘坐火车、骑自行车或自己开私家车等，超市促销可以釆用打折、送商品、送积分等方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>编译原理 有限自动机</title>
      <link>/posts/12879185/</link>
      <pubDate>Thu, 14 Oct 2021 12:42:52 +0000</pubDate>
      
      <guid>/posts/12879185/</guid>
      <description>&lt;p&gt;有限自动机是对语言有穷描述的一种方法，下面将介绍确定有限自动机、非确定有限自动机和他们之间的转化以及确定有限自动机的最小化。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>文法和语言</title>
      <link>/posts/b68db71a/</link>
      <pubDate>Thu, 14 Oct 2021 12:42:52 +0000</pubDate>
      
      <guid>/posts/b68db71a/</guid>
      <description>&lt;p&gt;编译原理-文法和语言&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>编译原理-作业</title>
      <link>/posts/29dc6b0/</link>
      <pubDate>Wed, 06 Oct 2021 19:08:03 +0000</pubDate>
      
      <guid>/posts/29dc6b0/</guid>
      <description>&lt;p&gt;课上不努力、课后徒伤悲。好好听网课，好好学习！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>二进制引发的思考</title>
      <link>/posts/c14b5b33/</link>
      <pubDate>Sat, 02 Oct 2021 21:45:11 +0000</pubDate>
      
      <guid>/posts/c14b5b33/</guid>
      <description>&lt;p&gt;在做leetcode时发现自己对二进制的相关知识不太了解，将自己所找资料进行总结。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>9.15随笔</title>
      <link>/posts/c8d9f0a8/</link>
      <pubDate>Wed, 15 Sep 2021 19:08:42 +0000</pubDate>
      
      <guid>/posts/c8d9f0a8/</guid>
      <description>&lt;p&gt;人生当中成功只是一时的，失败却是主旋律。但是如何面对失败，却把人分成了不同的样子，有的人会被失败击垮，有的人能不断的爬起来继续向前&amp;hellip;我想真正的成熟应该并不是追求完美，而是直面自己的缺憾，这才是生活的本质。罗曼罗兰说过，这个世上只有一种真正的英雄主义，那就是，认清生活的真相，并且仍然热爱她。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>基于YOLOv5-DeepSort的目标追踪器的封装</title>
      <link>/posts/5306f355/</link>
      <pubDate>Wed, 04 Aug 2021 15:30:57 +0000</pubDate>
      
      <guid>/posts/5306f355/</guid>
      <description>&lt;p&gt;由于项目需要目标追踪，之前打算是用OpenCV提供的算法进行追踪，但实测下来效果不是很理想，了解到使用YOLOv5与DeepSort相结合的方式可以进行多物体追踪，在跑通作者提供的track示例后，将目标检测和目标追踪分别进行封装，方便以后在项目中使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>目标检测评估指标</title>
      <link>/posts/d9d2de90/</link>
      <pubDate>Tue, 03 Aug 2021 13:03:32 +0000</pubDate>
      
      <guid>/posts/d9d2de90/</guid>
      <description>&lt;h5 id=&#34;检测精度&#34;&gt;检测精度&lt;a class=&#34;anchor ms-1&#34; href=&#34;#检测精度&#34;&gt;&lt;i class=&#34;fas fa-link&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h5&gt;</description>
    </item>
    
    <item>
      <title>Hexo-NexT使用LaTeX公式</title>
      <link>/posts/37cab689/</link>
      <pubDate>Tue, 03 Aug 2021 12:55:25 +0000</pubDate>
      
      <guid>/posts/37cab689/</guid>
      <description>&lt;p&gt;在使用next主题的过程中，碰到写的markdown中有LaTeX公式不显示的问题，遂查找资料解决。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>首次部署网站-Hexo-Nginx</title>
      <link>/posts/19323af8/</link>
      <pubDate>Sat, 31 Jul 2021 15:20:40 +0000</pubDate>
      
      <guid>/posts/19323af8/</guid>
      <description>&lt;p&gt;去年在好友 &lt;a href=&#34;https://wanfengcxz.cn/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;晚风吹行舟&lt;/a&gt; 的帮助下购买了腾讯云的主机以及域名，但这些在很长时间内都是闲置状态。 暑期这段时间收到了腾讯云服务电话，域名备案需要更新，顺便将自己网站进行完善。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>我目前大三在读。 写过Golang的小项目，了解过目标检测、ROS。我也对具有良好理论成分的更多应用问题感兴趣。 这是我的简历（上次更新于 2022 年 7</description>
    </item>
    
    <item>
      <title>整理的资料</title>
      <link>/data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/data/</guid>
      <description>收集的觉得不错的资料 Go package testify stretchr/testify go的测试包，不用写if err!=nil进行测试 jwt-go dgrijalva/jwt-go 认证的包 PASETO o1egl/paseto 基于token的认证库，比JWT更安全 site dbdiagram dbd</description>
    </item>
    
  </channel>
</rss>
